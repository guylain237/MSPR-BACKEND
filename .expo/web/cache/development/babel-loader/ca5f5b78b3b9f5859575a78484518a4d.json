{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _rem = _interopRequireDefault(require(\"./replacers/rem\"));\nvar _vars = _interopRequireDefault(require(\"./replacers/vars\"));\nvar _percent = _interopRequireDefault(require(\"./replacers/percent\"));\nvar _operation = _interopRequireDefault(require(\"./replacers/operation\"));\nvar _scale = _interopRequireDefault(require(\"./replacers/scale\"));\nvar Value = function () {\n  function Value(value, prop) {\n    var varsArr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    (0, _classCallCheck2.default)(this, Value);\n    this.value = value;\n    this.outValue = null;\n    this.prop = prop;\n    this.varsArr = varsArr;\n    this.stack = options.stack || [];\n    this.isOperation = options.isOperation !== undefined ? options.isOperation : false;\n  }\n  (0, _createClass2.default)(Value, [{\n    key: \"calc\",\n    value: function calc() {\n      if (typeof this.value === 'function') {\n        this.value = this.value();\n      }\n      if (typeof this.value === 'string') {\n        this.calcString();\n      } else {\n        this.proxyValue();\n      }\n      if (this.isFinal()) {\n        this.applyScale();\n      }\n      return this.outValue;\n    }\n  }, {\n    key: \"calcString\",\n    value: function calcString() {\n      var actions = [this.tryCalcOperation, this.isOperation ? this.tryCalcPercent : null, this.tryCalcVar, this.tryCalcRem].filter(Boolean);\n      var value = this.tryActions(actions, this.value);\n      if (value !== null) {\n        this.outValue = value;\n      } else {\n        this.proxyValue();\n      }\n    }\n  }, {\n    key: \"tryActions\",\n    value: function tryActions(actions, str) {\n      for (var i = 0; i < actions.length; i++) {\n        var val = actions[i].call(this, str);\n        if (val !== null) {\n          return val;\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"tryCalcOperation\",\n    value: function tryCalcOperation(str) {\n      var opInfo = _operation.default.isOperation(str);\n      if (!opInfo) {\n        return null;\n      }\n      this.isOperation = true;\n      var operands = ['v1', 'v2'];\n      for (var i = 0; i < operands.length; i++) {\n        var operand = operands[i];\n        var operandValue = this.calcOperandValue(opInfo[operand]);\n        if (operandValue !== null) {\n          opInfo[operand] = operandValue;\n        } else {\n          return null;\n        }\n      }\n      return _operation.default.exec(opInfo);\n    }\n  }, {\n    key: \"calcOperandValue\",\n    value: function calcOperandValue(str) {\n      var actions = [this.tryCalcVar, this.tryCalcPercent, this.tryCalcRem, this.tryCalcFloat];\n      return this.tryActions(actions, str);\n    }\n  }, {\n    key: \"tryCalcVar\",\n    value: function tryCalcVar(str) {\n      if (_vars.default.isVar(str)) {\n        var val = _vars.default.calc(str, this.varsArr);\n        if (this.stack.indexOf(str) >= 0) {\n          throw new Error('Cyclic reference: ' + this.stack.concat([str]).join(' -> '));\n        }\n        var options = {\n          stack: this.stack.concat([str]),\n          isOperation: this.isOperation\n        };\n        return new Value(val, str, this.varsArr, options).calc();\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"tryCalcPercent\",\n    value: function tryCalcPercent(str) {\n      if (_percent.default.isPercent(str)) {\n        return _percent.default.calc(str, this.prop);\n      }\n      return null;\n    }\n  }, {\n    key: \"tryCalcRem\",\n    value: function tryCalcRem(str) {\n      if (_rem.default.isRem(str)) {\n        var remValue = _vars.default.get('$rem', this.varsArr);\n        return _rem.default.calc(str, remValue);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"tryCalcFloat\",\n    value: function tryCalcFloat(str) {\n      var val = parseFloat(str);\n      return !isNaN(val) ? val : null;\n    }\n  }, {\n    key: \"isFinal\",\n    value: function isFinal() {\n      return !this.stack.length;\n    }\n  }, {\n    key: \"proxyValue\",\n    value: function proxyValue() {\n      this.outValue = this.value;\n    }\n  }, {\n    key: \"applyScale\",\n    value: function applyScale() {\n      if (_vars.default.isVar(this.prop)) {\n        return;\n      }\n      var scaleFactor = _vars.default.get('$scale', this.varsArr) || 1;\n      if (scaleFactor === 1) {\n        return;\n      }\n      if (_scale.default.isScalable(this.outValue, this.prop)) {\n        this.outValue = _scale.default.calc(this.outValue, scaleFactor);\n      }\n    }\n  }]);\n  return Value;\n}();\nexports.default = Value;","map":{"version":3,"names":["_rem","_interopRequireDefault","require","_vars","_percent","_operation","_scale","Value","value","prop","varsArr","arguments","length","undefined","options","_classCallCheck2","default","outValue","stack","isOperation","_createClass2","key","calc","calcString","proxyValue","isFinal","applyScale","actions","tryCalcOperation","tryCalcPercent","tryCalcVar","tryCalcRem","filter","Boolean","tryActions","str","i","val","call","opInfo","operation","operands","operand","operandValue","calcOperandValue","exec","tryCalcFloat","vars","isVar","indexOf","Error","concat","join","percent","isPercent","rem","isRem","remValue","get","parseFloat","isNaN","scaleFactor","scale","isScalable","exports"],"sources":["C:/Users/guyla/Desktop/ios/react/node_modules/react-native-extended-stylesheet/src/value.js"],"sourcesContent":["/**\n * Calculates particular value\n */\n\nimport rem from './replacers/rem';\nimport vars from './replacers/vars';\nimport percent from './replacers/percent';\nimport operation from './replacers/operation';\nimport scale from './replacers/scale';\n\nexport default class Value {\n  /**\n   * Constructor\n   *\n   * @param {*} value\n   * @param {String} prop property for which valye is calculated\n   * @param {Array} varsArr array of objects with vars\n   * @param {Object} [options]\n   * @param {Array} [options.stack] stack of calls when resolving variable\n   * @param {Boolean} [options.isOperation] is value calculated inside operation\n   */\n  constructor(value, prop, varsArr = [], options = {}) {\n    this.value = value;\n    this.outValue = null;\n    this.prop = prop;\n    this.varsArr = varsArr;\n    this.stack = options.stack || [];\n    this.isOperation = options.isOperation !== undefined ? options.isOperation : false;\n  }\n\n  /**\n   * Calculates value:\n   * execute function, resolve var refs, convert string of (rem, percent) to pixels\n   */\n  calc() {\n    if (typeof this.value === 'function') {\n      this.value = this.value();\n    }\n\n    if (typeof this.value === 'string') {\n      this.calcString();\n    } else {\n      this.proxyValue();\n    }\n\n    if (this.isFinal()) {\n      this.applyScale();\n    }\n\n    return this.outValue;\n  }\n\n  /**\n   * Calculates string\n   * Here we do not calc direct percent values as they supported natively since RN 43 (#32).\n   * But keep calculating percent for operands when value defined as operation.\n   */\n  calcString() {\n    let actions = [\n      this.tryCalcOperation,\n      this.isOperation ? this.tryCalcPercent : null,\n      this.tryCalcVar,\n      this.tryCalcRem,\n    ].filter(Boolean);\n    let value = this.tryActions(actions, this.value);\n    if (value !== null) {\n      this.outValue = value;\n    } else {\n      this.proxyValue();\n    }\n  }\n\n  /**\n   * Applies array of calculations to value. Stops on the first calculation that returns not null.\n   * @param {Array} actions\n   * @param {String} str\n   */\n  tryActions(actions, str) {\n    // todo: use for.. of after https://github.com/facebook/react-native/issues/4676\n    for (let i = 0; i < actions.length; i++) {\n      let val = actions[i].call(this, str);\n      if (val !== null) {\n        return val;\n      }\n    }\n    return null;\n  }\n\n  tryCalcOperation(str) {\n    let opInfo = operation.isOperation(str);\n    if (!opInfo) {\n      return null;\n    }\n    this.isOperation = true;\n    // todo: use for.. of after https://github.com/facebook/react-native/issues/4676\n    const operands = ['v1', 'v2'];\n    for (let i = 0; i < operands.length; i++) {\n      const operand = operands[i];\n      const operandValue = this.calcOperandValue(opInfo[operand]);\n      if (operandValue !== null) {\n        opInfo[operand] = operandValue;\n      } else {\n        // if we cant calculate operand - it is not operation, see #3\n        return null;\n      }\n    }\n    return operation.exec(opInfo);\n  }\n\n  calcOperandValue(str) {\n    let actions = [\n      this.tryCalcVar,\n      this.tryCalcPercent,\n      this.tryCalcRem,\n      this.tryCalcFloat,\n    ];\n    return this.tryActions(actions, str);\n  }\n\n  tryCalcVar(str) {\n    if (vars.isVar(str)) {\n      let val = vars.calc(str, this.varsArr);\n      if (this.stack.indexOf(str) >= 0) {\n        throw new Error('Cyclic reference: ' + this.stack.concat([str]).join(' -> '));\n      }\n      const options = {\n        stack: this.stack.concat([str]),\n        isOperation: this.isOperation,\n      };\n      // recursive call because var can link to another var or percent/rem\n      return new Value(val, str, this.varsArr, options).calc();\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Tries calc percent\n   */\n  tryCalcPercent(str) {\n    if (percent.isPercent(str)) {\n      return percent.calc(str, this.prop);\n    }\n    return null;\n  }\n\n  /**\n   * Tries calc rem\n   */\n  tryCalcRem(str) {\n    if (rem.isRem(str)) {\n      let remValue = vars.get('$rem', this.varsArr);\n      return rem.calc(str, remValue);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Tries calc float value from string\n   */\n  tryCalcFloat(str) {\n    let val = parseFloat(str);\n    return !isNaN(val) ? val : null;\n  }\n\n  /**\n   * Is it final calculation (not recursion)\n   */\n  isFinal() {\n    return !this.stack.length;\n  }\n\n  /**\n   * Just proxies value when no processing needed\n   */\n  proxyValue() {\n    this.outValue = this.value;\n  }\n\n  applyScale() {\n    // do not apply scale to variables, only for final numbers\n    // otherwise scale will be applied several times\n    if (vars.isVar(this.prop)) {\n      return;\n    }\n    let scaleFactor = vars.get('$scale', this.varsArr) || 1;\n    if (scaleFactor === 1) {\n      return;\n    }\n    if (scale.isScalable(this.outValue, this.prop)) {\n      this.outValue = scale.calc(this.outValue, scaleFactor);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}